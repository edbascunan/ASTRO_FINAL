---
interface Props {
  images: string[];
  title: string;
}

const { images, title } = Astro.props;
---

<div class="relative group">
  <div class="overflow-hidden aspect-video rounded-t-xl">
    {images.map((image, index) => (
      <div class="absolute inset-0 transition-opacity duration-500" data-carousel-item data-index={index}>
        <img 
          src={image} 
          alt={`${title} - Imagen ${index + 1}`}
          class="w-full h-full object-cover"
        />
      </div>
    ))}
    
    <button class="absolute left-4 top-1/2 -translate-y-1/2 bg-black/50 p-2 rounded-full text-white opacity-0 group-hover:opacity-100 transition-opacity" data-carousel-prev>
      <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <path d="m15 18-6-6 6-6"/>
      </svg>
    </button>
    
    <button class="absolute right-4 top-1/2 -translate-y-1/2 bg-black/50 p-2 rounded-full text-white opacity-0 group-hover:opacity-100 transition-opacity" data-carousel-next>
      <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <path d="m9 18 6-6-6-6"/>
      </svg>
    </button>
  </div>
</div>

<script>
  class Carousel {
    constructor(element: Element) {
      const items = element.querySelectorAll('[data-carousel-item]');
      const prevBtn = element.querySelector('[data-carousel-prev]');
      const nextBtn = element.querySelector('[data-carousel-next]');
      let currentIndex = 0;

      const showItem = (index: number) => {
        items.forEach((item, i) => {
          (item as HTMLElement).style.opacity = i === index ? '1' : '0';
        });
      };

      const next = () => {
        currentIndex = (currentIndex + 1) % items.length;
        showItem(currentIndex);
      };

      const prev = () => {
        currentIndex = (currentIndex - 1 + items.length) % items.length;
        showItem(currentIndex);
      };

      // Initialize
      showItem(0);

      // Auto-advance
      const interval = setInterval(next, 5000);

      // Event listeners
      prevBtn?.addEventListener('click', () => {
        clearInterval(interval);
        prev();
      });

      nextBtn?.addEventListener('click', () => {
        clearInterval(interval);
        next();
      });
    }
  }

  // Initialize all carousels
  document.querySelectorAll('.relative.group').forEach(carousel => {
    new Carousel(carousel);
  });
</script>